[{"title":"jQuery插入元素动态绑定事件","date":"2016-08-29T03:53:00.000Z","path":"2016/08/29/FrontEnd/jquery-on-append/","text":"开发中遇到了一个问题,jQuery事件绑定的时候,只对DOM中存在的元素生效,不能像css选择器那样,不论是插入的元素还是本身存在的元素,都能生效.查阅资料,发现,原来是很简单的问题,jQuery的事件绑定本身就是动态绑定.只不过是参数设置的问题.","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://liujiaan.ren/tags/JavaScript/"}]},{"title":"Web移动端Fixed布局的解决方案","date":"2016-08-22T06:32:57.000Z","path":"2016/08/22/FrontEnd/ios-web-fixed-input-bug/","text":"转载自:http://efe.baidu.com/blog/mobile-fixed-layout/ 移动端业务开发，iOS 下经常会有 fixed 元素和输入框(input 元素)同时存在的情况。 但是 fixed 元素在有软键盘唤起的情况下，会出现许多莫名其妙的问题。 这篇文章里就提供一个简单的有输入框情况下的 fixed 布局方案。 iOS下的 Fixed + Input BUG现象软键盘唤起后，页面的 fixed 元素将失效（即无法浮动，也可以理解为变成了 absolute 定位），所以当页面超过一屏且滚动时，失效的 fixed 元素就会跟随滚动了。这便是 iOS 上 fixed 元素和输入框的 bug 。其中不仅限于 type=text 的输入框，凡是软键盘（比如时间日期选择、select 选择等等）被唤起，都会遇到同样地问题。 解决思路既然在 iOS 下由于软键盘唤出后，页面 fixed 元素会失效，导致跟随页面一起滚动，那么假如——页面不会过长出现滚动，那么即便 fixed 元素失效，也无法跟随页面滚动，也就不会出现上面的问题了。那么按照这个思路，如果使 fixed 元素的父级不出现滚动，而将原 body 滚动的区域域移到 main 内部，而 header 和 footer 的样式不变，代码如下：12345678910111213141516171819&lt;body class=\"layout-scroll-fixed\"&gt; &lt;!-- fixed定位的头部 --&gt; &lt;header&gt; &lt;/header&gt; &lt;!-- 可以滚动的区域 --&gt; &lt;main&gt; &lt;div class=\"content\"&gt; &lt;!-- 内容在这里... --&gt; &lt;/div&gt; &lt;/main&gt; &lt;!-- fixed定位的底部 --&gt; &lt;footer&gt; &lt;input type=\"text\" placeholder=\"Footer...\"/&gt; &lt;button class=\"submit\"&gt;提交&lt;/button&gt; &lt;/footer&gt;&lt;/body&gt; 1234567891011121314151617181920212223242526272829303132header, footer, main &#123; display: block;&#125;header &#123; position: fixed; height: 50px; left: 0; right: 0; top: 0;&#125;footer &#123; position: fixed; height: 34px; left: 0; right: 0; bottom: 0;&#125;main &#123; /* main绝对定位，进行内部滚动 */ position: absolute; top: 50px; bottom: 34px; /* 使之可以滚动 */ overflow-y: scroll;&#125;main .content &#123; height: 2000px;&#125; 在原始输入法下， fixed 元素可以定位在页面的正确位置。滚动页面时，由于滚动的是 main 内部的 div，因此 footer 没有跟随页面滚动。上面貌似解决了问题，但是如果在手机上实际测试一下，会发现 main 元素内的滚动非常不流畅，滑动的手指松开后，滚动立刻停止，失去了原本的流畅滚动特性。百度一下弹性滚动的问题，发现在 webkit 中，下面的属性可以恢复弹性滚动。 -webkit-overflow-scrolling: touch; 在 main 元素上加上该属性，嗯，丝般顺滑的感觉又回来了！12345678910main &#123; /* main绝对定位，进行内部滚动 */ position: absolute; top: 50px; bottom: 34px; /* 使之可以滚动 */ overflow-y: scroll; /* 增加该属性，可以增加弹性 */ -webkit-overflow-scrolling: touch;&#125; 另外，这里的 header 和 footer 使用的是 fixed 定位，如果考虑到更老一些的 iOS 系统不支持 fixed 元素，完全可以把 fixed 替换成 absolute 。测试后效果是一样的。至此一个不依赖第三方库的 fixed 布局就完成了。 Android 下布局谈到了 iOS ，也来简单说一下 Android 下的布局吧。 在 Android2.3+ 中，因为不支持 overflow-scrolling ，因此部分浏览器内滚动会有不流畅的卡顿。但是目前发现在 body 上的滚动还是很流畅的，因此使用第一种在 iOS 出现问题的 fixed 定位的布局就可以了。 如果需要考虑 Android2.3 以下系统，因为不支持 fixed 元素，所以依然要需要考虑使用 isScroll.js 来实现内部滚动。 其实在 fixed 和输入框的问题上，基本思路就是： &gt; 由于 fixed 在软键盘唤起后会失效，导致在页面可以滚动时，会跟随页面一起滚动。因此如果页面无法滚动，那么 fixed 元素即使失效，也不会滚动，也就不会出现 bug 了。 所以可以在这个方面去考虑解决问题。 其他的一些细节处理在细节处理上，其实还有很多要注意的，挑几个实际遇到比较大的问题来说一下： 有时候输入框 focus 以后，会出现软键盘遮挡输入框的情况，这时候可以尝试 input 元素的 scrollIntoView 进行修复。 在 iOS 下使用第三方输入法时，输入法在唤起经常会盖住输入框，只有在输入了一条文字后，输入框才会浮出。目前也不知道有什么好的办法能让唤起输入框时正确显示。这暂时算是 iOS 下的一个坑吧。 有些第三方浏览器底部的工具栏是浮在页面之上的，因此底部 fixed 定位会被工具栏遮挡。解决办法也比较简单粗暴——适配不同的浏览器，调整 fixed 元素距离底部的距离。 最好将 header 和 footer 元素的 touchmove 事件禁止，以防止滚动在上面触发了部分浏览器全屏模式切换，而导致顶部地址栏和底部工具栏遮挡住 header 和 footer 元素。 在页面滚动到上下边缘的时候，如果继续拖拽会将整个 View 一起拖拽走，导致页面的“露底”。为了防止页面露底，可以在页面拖拽到边缘的时候，通过判断拖拽方向以及是否为边缘来阻止 touchmove 事件，防止页面继续拖拽。 以上面内滚动 layout-scroll-fixed 布局为例，给出一段代码作为参考：12345678910111213141516171819202122232425262728293031323334// 防止内容区域滚到底后引起页面整体的滚动var content = document.querySelector('main');var startY;content.addEventListener('touchstart', function (e) &#123; startY = e.touches[0].clientY;&#125;);content.addEventListener('touchmove', function (e) &#123; // 高位表示向上滚动 // 底位表示向下滚动 // 1容许 0禁止 var status = '11'; var ele = this; var currentY = e.touches[0].clientY; if (ele.scrollTop === 0) &#123; // 如果内容小于容器则同时禁止上下滚动 status = ele.offsetHeight &gt;= ele.scrollHeight ? '00' : '01'; &#125; else if (ele.scrollTop + ele.offsetHeight &gt;= ele.scrollHeight) &#123; // 已经滚到底部了只能向上滚动 status = '10'; &#125; if (status != '11') &#123; // 判断当前的滚动方向 var direction = currentY - startY &gt; 0 ? '10' : '01'; // 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动 if (!(parseInt(status, 2) &amp; parseInt(direction, 2))) &#123; stopEvent(e); &#125; &#125;&#125;);","tags":[{"name":"CSS","slug":"CSS","permalink":"http://liujiaan.ren/tags/CSS/"},{"name":"html","slug":"html","permalink":"http://liujiaan.ren/tags/html/"},{"name":"移动开发","slug":"移动开发","permalink":"http://liujiaan.ren/tags/移动开发/"}]},{"title":"swig模板引擎","date":"2016-08-19T09:30:53.000Z","path":"2016/08/19/JavaScript/node-js-swig-engine/","text":"现在有很多视图引擎,jade,swig等.用过jade,感觉不是很喜欢.还是.html看起来舒服一点.swig能很好的解决这一点,swig默认以.ejs文件结尾,但是能通过一些设置,让它更加友好.首先附上github地址:swig.js目前没有发现swig的文档,github.io貌似挂了.可以将项目clone下来,执行12$ npm install swig$ make docs 编译完成自动打开浏览器,然后能看到documentation.要在express框架中用swig需要进行一些设置.12345678// view engine setupapp.engine('html', swig.renderFile)app.set('view cache', false);swig.setDefaults(&#123; cache: false &#125;);app.set('views', path.join(__dirname, 'views'));app.set('view engine', 'html');// Open and close controls for variables. Defaults to ['&#123;&#123;', '&#125;&#125;'].swig.setDefaults(&#123;varControls: ['&lt;%=', '%&gt;']&#125;); 补充:这里有一个模板引擎性能的测试,不知道有没有参考价值(测试模板较少,包括[artTemplate; jCT; juicer; doT; Handlebars; tmpl; easyTemplate; underscoreTemplate; baiduTemplate; Mustache; kissyTemplate;]) 引擎渲染速度测试","tags":[{"name":"html","slug":"html","permalink":"http://liujiaan.ren/tags/html/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://liujiaan.ren/tags/JavaScript/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://liujiaan.ren/tags/Nodejs/"}]},{"title":"CSS小技巧整理","date":"2016-08-18T07:36:09.000Z","path":"2016/08/18/FrontEnd/css-skill/","text":"CSS小技巧整理 某一元素高度等于宽度示例:123456789101112131415&lt;style type=\"text/css\"&gt;#container &#123; width: 80%; height: 500px;&#125;.attr &#123; width: 50%; height: 0; padding-bottom: 50%; background-color: #008b57;&#125;&lt;/style&gt;&lt;div id='container'&gt; &lt;div class='attr'&gt;&lt;/div&gt;&lt;/div&gt; 来源: css中如何规定某一元素高度等于其宽度 移动端解决fixed和input获取焦点软键盘弹出影响定位的问题添加css123.fixfixed.navbar-fixed-top &#123; position: absolute;&#125; 添加JS1234567891011$(function () &#123; if (Modernizr.touch) &#123; $(document).on('focus', 'input', function () &#123; $(\".navbar-fixed-top\").addClass('fixfixed'); &#125;); $(document).on('blur', 'input', function () &#123; $(\".navbar-fixed-top\").removeClass('fixfixed'); &#125;); &#125;&#125;); 参考:修复position:fixed在ios虚拟键盘弹出时错位的bug 仅作参考,不限于bootstrap","tags":[{"name":"CSS","slug":"CSS","permalink":"http://liujiaan.ren/tags/CSS/"}]},{"title":"Mac软件","date":"2016-08-17T09:07:29.000Z","path":"2016/08/17/mac-software/","text":"欧陆词典aria","tags":[{"name":"Mac","slug":"Mac","permalink":"http://liujiaan.ren/tags/Mac/"}]},{"title":"Give it five minutes","date":"2016-08-17T07:11:44.000Z","path":"2016/08/17/杂记/give-it-five-minutes/","text":"转载自https://signalvnoise.com/posts/3124-give-it-five-minutes 原文A few years ago I used to be a hothead. Whenever anyone said anything, I’d think of a way to disagree. I’d push back hard if something didn’t fit my world-view.It’s like I had to be first with an opinion – as if being first meant something. But what it really meant was that I wasn’t thinking hard enough about the problem. The faster you react, the less you think. Not always, but often.It’s easy to talk about knee jerk reactions as if they are things that only other people have. You have them too. If your neighbor isn’t immune, neither are you.This came to a head back in 2007. I was speaking at the Business Innovation Factory conference in Providence, RI. So was Richard Saul Wurman. After my talk Richard came up to introduce himself and compliment my talk. That was very generous of him. He certainly didn’t have to do that.And what did I do? I pushed back at him about the talk he gave. While he was making his points on stage, I was taking an inventory of the things I didn’t agree with. And when presented with an opportunity to speak with him, I quickly pushed back at some of his ideas. I must have seemed like such an asshole.His response changed my life. It was a simple thing. He said “Man, give it five minutes.” I asked him what he meant by that? He said, it’s fine to disagree, it’s fine to push back, it’s great to have strong opinions and beliefs, but give my ideas some time to set in before you’re sure you want to argue against them. “Five minutes” represented “think”, not react. He was totally right. I came into the discussion looking to prove something, not learn something.This was a big moment for me.Richard has spent his career thinking about these problems. He’s given it 30 years. And I gave it just a few minutes. Now, certainly he can be wrong and I could be right, but it’s better to think deeply about something first before being so certain you’re right.There’s also a difference between asking questions and pushing back. Pushing back means you already think you know. Asking questions means you want to know. Ask more questions.Learning to think first rather than react quick is a life long pursuit. It’s tough. I still get hot sometimes when I shouldn’t. But I’m really enjoying all the benefits of getting better.If you aren’t sure why this is important, think about this quote from Jonathan Ive regarding Steve Jobs’ reverence for ideas: And just as Steve loved ideas, and loved making stuff, he treated the process of creativity with a rare and a wonderful reverence. You see, I think he better than anyone understood that while ideas ultimately can be so powerful, they begin as fragile, barely formed thoughts, so easily missed, so easily compromised, so easily just squished. That’s deep. Ideas are fragile. They often start powerless. They’re barely there, so easy to ignore or skip or miss.There are two things in this world that take no skill: 1. Spending other people’s money and 2. Dismissing an idea.Dismissing an idea is so easy because it doesn’t involve any work. You can scoff at it. You can ignore it. You can puff some smoke at it. That’s easy. The hard thing to do is protect it, think about it, let it marinate, explore it, riff on it, and try it. The right idea could start out life as the wrong idea.So next time you hear something, or someone, talk about an idea, pitch an idea, or suggest an idea, give it five minutes. Think about it a little bit before pushing back, before saying it’s too hard or it’s too much work. Those things may be true, but there may be another truth in there too: It may be worth it. 译文几年前，我还是一个非常容易冲动的人。无论何人何时谈论何事，我总会想着去反驳。如果某事不符合我的世界观我会狠狠地拒绝。就好象我必须是这个观念的发现者（第一人），因为是第一个才会有意义。但是真实的情况是，有关那些问题我并没有思考的够深。你反应的越快，你思考的越少。并不总是这样，但通常会是。谈论膝跳反射很容易，因为它们是只有人类才有的反应。你也有。如果你的邻居不是该反射的免疫者，你也不应当是。时间返回到2007年。那时候我在RI省举行商业创新工厂的会议上谈话。Richard Saul Wurman也在。我谈完后Richard过来自我介绍并恭维我的谈话。他很宽容大量，他本不必那样做的。我是怎么回应的呢？我反驳了他的谈话。当他在大会上阐述自己观点的时候，我列了一份我不同意事情的单子。当有机会与他说话的时候，我很快地反驳了他的一些想法。我一定看起来是非常的可恶。他的举动改变了我的生活。事情很简单。他说，老兄给我五分钟时间。我想问他这是啥意思。他说，可以不同意，可以反驳，可以有强大的信念和信仰，但在你想争论这些想法之前请不妨思考它们几分钟。五分钟代表思考，绝非反应。他绝对是正确的。我开始以讨论的观点去证明某些事情，而不是学习它们。 对我来说，那确实一个伟大的瞬间。 Richard花了毕生去思考那些问题，对于它们，他奉献了30年，我却只给了几分钟时间而已。现在，当然他可以是错误的我可以是正确的，但最好还是先好好思考那些问题在你确信你是对的之前。提问题和反驳是有区别的，反驳意味着已经认为你知道了；问问题意味着你想知道。问更多问题吧。遇事先思考而不是快速反驳是值得一生追求的信条。我知道这很难。我时而还是会头脑发热，当我不再总是头脑发热时，我真的享受这种观念带来的好处。如果你还不确定为什么这是重要的，考虑一下Jonathan Ive的这段向Steve Jobs致敬的话。\b\b “正如Steve热爱想法，热爱制造东西，他对创新有着罕见和崇高地尊敬。你知道我认为他比任何人都理解想法最终是强大的，想法刚开始也许很脆弱，几乎算不上想法，所以很容易被忘掉，很容易被妥协，很容易被扯碎”这段话很深刻，想法最初都是脆弱的，他们一开始并没有任何能量，他们算不上是想法，因而很容易被忽略。这世界上有两种事情不需要技巧:1,花别人的钱;2,摒弃想法。 摒弃想法非常容易它不需要涉及任何努力。你可以嘲笑它，可以忽略它，可以朝它喷烟圈，这都容易。难的是保护它，思考它，浸淫它，探索它，重复它，实验它。正确的想法会开启我们的生活，一如错误的想法一样。所以，下一次你听到某件事情的时候，或者某个人谈论某个想法，抛出或者建议一个想法的时候，给这个想法五分钟。在反驳它之前稍微思考一下，而不是说思考很难做或者很费工夫。也许真的很难，但是也可能有另外一个事实：思考是值的。","tags":[{"name":"杂记","slug":"杂记","permalink":"http://liujiaan.ren/tags/杂记/"}]},{"title":"移动端高清屏图片适配","date":"2016-08-04T08:48:59.000Z","path":"2016/08/04/FrontEnd/mobile-apter/","text":"参考张鑫旭博客首先我们看下我们切图的命名方式： 假设有两张图片名为：正确的命名方式应该是这样test_t@2x.png 、test_t@3x.png 这是对于ios APP 切图来说的。HTML并不会智能匹配,但是新标准有相应的属性能够实现. 1. image-setWebkit内核”safari6”和“chrome21”支持CSS4的background-image新规范草案image-set。通过Webkit内核的浏览器私有属性“-webkit”，image-set为Web前端人员提供了一种解决高分辨率图像的显示，用来解决苹果公司提出的Retian屏幕显示图片的技术问题。简而言之：这个属性用来支持Web前端人员解决不同分辨率下图片的显示，特别的（Retina屏幕）。 测试页面 1&lt;div id=\"test\"&gt;&lt;/div&gt; 12345678910111213#test &#123; background-image: url(assets/no-image-set.png); background-image: -webkit-image-set(url(assets/test.png) 1x, url(assets/test-hires.png) 2x); background-image: -moz-image-set(url(assets/test.png) 1x, url(assets/test-hires.png) 2x); background-image: -o-image-set(url(assets/test.png) 1x, url(assets/test-hires.png) 2x); background-image: -ms-image-set(url(assets/test.png) 1x, url(assets/test-hires.png) 2x); width:200px; height:75px; &#125; img srcset123&lt;img class=\"image\" src=\"mm-width-128px.jpg\" srcset=\"mm-width-128px.jpg 128w, mm-width-256px.jpg 256w, mm-width-512px.jpg 512w\" sizes=\"(max-width: 360px) 340px, 128px\"&gt; 1&lt;img src=\"normal-image.jpg\" srcset=\"better-image.jpg 2x\"&gt; srcset用来指向提供的图片资源，注意，仅仅是资源指向，没有以前的1x, 2x什么的，这个都交给浏览器了，我们不需要关心！例如这里，指向了3个尺寸图片，分别实际尺寸128像素，256像素和512像素。 sizes用来表示尺寸临界点，主要跟响应式布局打交道。语法如下： sizes=”[media query] [length], [media query] [length] … etc” 例如上述代码中，size = “(max-width: 360px) 340px, 128px”表示当视区宽度不大于360像素时候，图片的宽度限制为340像素，其他情况下，使用128像素（对应下面demo页面第1张图）。 如果sizes=”128px”, 则尺寸就一直是128像素，图片只会根据设备像素比发生变化。 注意，这里所有的值都是指宽度值，且单位任意，em, px, cm, vw, …都是可以的，甚至可以CSS3的calc计算（对应下面demo页面第2张图），例如： sizes=”(max-width: 360px) calc(100vw - 20px), 128px”表示当视区宽度不大于360像素时候，图片宽度为整个视区宽度减去20像素的大小。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://liujiaan.ren/tags/CSS/"},{"name":"html","slug":"html","permalink":"http://liujiaan.ren/tags/html/"},{"name":"移动开发","slug":"移动开发","permalink":"http://liujiaan.ren/tags/移动开发/"}]},{"title":"yoeman-generator各种构造器,轮子","date":"2016-08-01T08:33:45.000Z","path":"2016/08/01/JavaScript/yoeman-generator/","text":"yeoman官网提供了很多构造器,免去了自己构建的烦恼. 地址:http://yeoman.io/generators/","tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://liujiaan.ren/tags/Nodejs/"},{"name":"Yeoman","slug":"Yeoman","permalink":"http://liujiaan.ren/tags/Yeoman/"}]},{"title":"div实现高度撑开的输入框","date":"2016-08-01T01:23:22.000Z","path":"2016/08/01/FrontEnd/div-contenteditable/","text":"转载来自张鑫旭-鑫空间-鑫生活原文地址： http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/ contenteditable使用input或textare时,输入框大小固定,因此采用div,在div上增加contenteditable=&quot;true&quot;属性.这样的话,没有placeholder属性,通过css样式:empty:before,增加content解决. 下面是一个示例12345&lt;div class=\"test_box\" contenteditable=\"true\" onpaste=\"return false\" data-placeholder=\"聊聊这组照片\" id=\"test_box\" onKeyUp=\"showLen(this);\"&gt;&lt;/div&gt;&lt;div style=\"text-align: right;padding-right: 0.8em\"&gt; &lt;span id=\"str_length\" class=\"str_length\"&gt;0&lt;/span&gt; &lt;span&gt;/200&lt;/span&gt;&lt;/div&gt; 12345678910111213141516171819.test_box &#123; min-height: 100px; max-height: 300px; margin-left: auto; margin-right: auto; padding: 0.8em; padding-bottom: 0; outline: 0; word-wrap: break-word; overflow-x: hidden; overflow-y: auto;&#125;.test_box:empty:before &#123; content: attr(data-placeholder); color:#d3d3d3;&#125;.test_box:focus:before&#123; content:none;&#125; 12345678910111213141516&lt;script&gt; showLen(document.getElementById(\"test_box\")); function showLen(obj) &#123; var t = document.getElementById(\"test_box\").innerText; var num = document.getElementById('str_length') if (t.length &gt; 200) &#123; num.innerHTML = obj.innerText.length; num.style.color= \"red\"; return false; &#125; else &#123; num.innerHTML = obj.innerText.length; return true; &#125; &#125;&lt;/script&gt; 注意,在获取div的内容时,不能用value,用innerText 温故知新 2016-08-25补充 利用全浏览器都支持的contenteditable模拟文本域可以实现体验相当不错的高度跟随内容自动撑开的效果，但是呢，有个很大的问题就是HTML内容可以直接被粘贴进去. 提问：在HTML中，contenteditable支持的属性值是？图样图森破时候的我，脑中就只有contenteditable=”true”和contenteditable=”false”，咳咳，后来我发现自己太天真了，新的草案中明确表示还有多个其他属性值： The contenteditable attribute is an enumerated attribute whose keywords are the empty string (“”), “events”, “caret”, “typing”, “plaintext-only”, “true”, and “false”. There is one additional state, the inherit state, which is the missing value default (and the invalid value default). 垂直展示下就是（不包括默认的inherit继承）：123456contenteditable=\"\"contenteditable=\"events\"contenteditable=\"caret\"contenteditable=\"plaintext-only\"contenteditable=\"true\"contenteditable=\"false\" 别问我，我也不知道”events”和”caret”是干什么用的，嘿，但是”plaintext-only”我是知道的，可以让编辑区域只能键入纯文本。这里就不需要demo了，直接下面的框框，大家可以试试，看看能不能搞富文本。 &lt;div contenteditable=&quot;plaintext-only&quot;&gt;&lt;/div&gt; 与contenteditable属性无关的CSS控制法一个div元素，要让其可编辑，也就是可读写，contenteditable属性是最常用方法，做前端的基本上都知道。但是，知道CSS中有属性可以让普通元素可读写的的同学怕是就少多了。 主角亮相：user-modify. 支持属性值如下：1234user-modify: read-only;user-modify: read-write;user-modify: write-only;user-modify: read-write-plaintext-only; 其中，write-only不用在意，当下这个年代，基本上没有浏览器支持，以后估计也不会有。read-only表示只读，就是普通元素的默认状态啦。然后，read-write和read-write-plaintext-only会让元素表现得像个文本域一样，可以focus以及输入内容。会发现，设置了read-write和read-write-plaintext-only值的两个标签元素是可以被focus的.而这两者的区别就在于，一个可以输入富文本，而下面一个只能输入纯文本.然而，抱歉地跟大家讲下，目前只有webkit内核浏览器才支持read-write-plaintext-only这个值，因此，我们的使用其实是：1-webkit-user-modify: read-write-plaintext-only 我们可以在移动端使用，以及，只需要兼顾webkit内容的桌面网页项目。","tags":[{"name":"CSS","slug":"CSS","permalink":"http://liujiaan.ren/tags/CSS/"},{"name":"html","slug":"html","permalink":"http://liujiaan.ren/tags/html/"}]},{"title":"git commit message和change log编写指南","date":"2016-07-26T03:28:53.000Z","path":"2016/07/26/git-commit-message-change-log/","text":"原作者：阮一峰 日期：2016年1月6日 原帖地址:Commit message 和 Change log 编写指南 git每次提交代码，都要写commit message，否则不允许提交。1$ git commit -m &quot;hello world&quot; 只执行git commit，会跳出文本编辑器，让你写多行。 基本上你写什么都行但是,一般来说,commit message应该清晰明了.说明本次提交的目的. 目前,社区有很多种commit message 规范.本文介绍angular规范,这是目前最广泛的写法,比较合理和系统化,并且有配套的工具. 一.commit message 的作用格式化commit message 有几个好处. 提供更多的历史信息,方便浏览.比如,下面的命令显示上次发布之后的变动,每个commit占据一行,你只要看首行,就知道某次commit的目的. $ git log HEAD –pretty=formate:%s 可以过滤某些commit(比如文档改动),以便于快速查找信息.比如,下面的命令仅显示本次发布新增加的功能. $ git log HEAD –grep feature 可以直接从commit生成change log.change log 是发布新版本时,用来说明与上一个文档差异的文档. 二,commit message 的格式每次提交,commit message 都包括三个部分:header,body和footer.12345&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;// 空一行&lt;body&gt;// 空一行&lt;footer&gt; 2.1 headerheader部分只有一行,包括三个字段:type(必需),scope(可选)和subject(必需). (1)type用于说明commit的类别,只允许使用下面7个标识.1234567feat：新功能（feature）fix：修补bugdocs：文档（documentation）style： 格式（不影响代码运行的变动）refactor：重构（即不是新增功能，也不是修改bug的代码变动）test：增加测试chore：构建过程或辅助工具的变动 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。 (2)scopescope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。 (3)subjectsubject是 commit 目的的简短描述，不超过50个字符。 以动词开头，使用第一人称现在时，比如change，而不是changed或changes 第一个字母小写 结尾不加句号（.） 2.2 bodyBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。1234567More detailed explanatory text, if necessary. Wrap it toabout 72 characters or so.Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent 有两个注意点。 使用第一人称现在时，比如使用change而不是changed或changes。 应该说明代码变动的动机，以及与以前行为的对比。 2.3 footerFooter 部分只用于两种情况。 （1）不兼容变动如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。1234567891011121314151617BREAKING CHANGE: isolate scope bindings definition has changed. To migrate the code follow the example below: Before: scope: &#123; myAttr: &apos;attribute&apos;, &#125; After: scope: &#123; myAttr: &apos;@&apos;, &#125; The removed `inject` wasn&apos;t generaly useful for directives so there should be no code using it. （2）关闭 Issue如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。1Closes #234 也可以一次关闭多个 issue 。1Closes #123, #245, #992 2.4 Revert还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。123revert: feat(pencil): add &apos;graphiteWidth&apos; optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02. Body部分的格式是固定的，必须写成This reverts commit &amp;lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。 三.CommitizenCommitizen是一个撰写合格 Commit message 的工具。安装命令如下。 $ npm install -g commitizen 然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。 $ commitizen init cz-conventional-changelog –save –save-exact 以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。 四.生成change log如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。生成的文档包括以下三个部分。123New featuresBug fixesBreaking changes. 每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。 $ npm install -g conventional-changelog$ cd my-project$ conventional-changelog -p angular -i CHANGELOG.md -w 上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。 如果你想生成所有发布的 Change log，要改为运行下面的命令。 $ conventional-changelog -p angular -i CHANGELOG.md -w -r 0 为了方便使用，可以将其写入package.json的scripts字段。12345&#123; &quot;scripts&quot;: &#123; &quot;changelog&quot;: &quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot; &#125;&#125; 以后，直接运行下面的命令即可。 $ npm run changelog","tags":[{"name":"Git","slug":"Git","permalink":"http://liujiaan.ren/tags/Git/"}]},{"title":"Java问题记录","date":"2016-07-12T12:33:05.000Z","path":"2016/07/12/icstest-java/","text":"引言Java问题记录前端开发怎么能不懂点后台知识？说好的前(全)端(栈)工程师呢？ string,stringbuffer与stringbuilder的区别?1.在执行速度方面的比较：StringBuilder &gt; StringBuffer2.StringBuffer与StringBuilder，他们是字符串变量，是可改变的对象，每当我们用它们对字符串做操作时，实际上是在一个对象上操作的，不像String一样创建一些对象进行操作，所以速度就快了。3.StringBuilder：线程非安全的 StringBuffer：线程安全的我们在字符串缓冲去被多个线程使用是，JVM不能保证StringBuilder的操作是安全的，虽然他的速度最快，但是可以保证StringBuffer是可以正确操作的。当然大多数情况下就是我们是在单线程下进行的操作，所以大多数情况下是建议用StringBuilder而不用StringBuffer的，就是速度的原因。 对于三者使用的总结： 如果要操作少量的数据用 = String 单线程操作字符串缓冲区 下操作大量数据 = StringBuilder 多线程操作字符串缓冲区 下操作大量数据 = StringBuffer Java防止非法和重复表单提交的方法答: 使用Session技术: 在regist.jsp页面中生成一个唯一随机值, 将其保存到Session中, 同时将其保存为表单的隐藏域的值 在处理注册的请求时,获取Session中值,获取请求参数的值,比较两者是否相同, 如果相同说明不是重复提交,请求通过同时删除session中保存的值, 如果不相同则是重复提交, 不能通过. 经典现实案例: 一位乘客在北京火车站买了一张去天津的火车票(直接刷的那种),他刷票进站坐火车去了天津, 回来后过了几天, 他又需要去天津这次他不想再买票, 直接拿上次的票去进站口刷, 检票机提示“此火车票已使用过了”, 不能进站. 博客园详细文章解答:JavaWeb学习总结(十三)——使用Session防止表单重复提交 静态include与动态include的区别分析：为了更深刻的了解这两者的区别，专门搜索了类似的资料，写出来供大家分享： 静态include的结果是把其他jsp引入当前jsp,两者合为一体，用include指令, 包含的动作是在jsp被编译成java文件时执行的, 只有第一次请求时执行. 动态include的结构是两者独立,直到输出时才合并，用&lt;jsp:include&gt;, 包含的动作是在jsp对应的Serlet处理请求时去执行的,每次请求都会执行. 动态include的jsp文件独立性很强,是一个单独的jsp文件,需要使用的对象,页面设置,都必须由自己创建,当然,还好它和include它的页面的request范围是一致的. 而静态include纯粹是把代码写在外面的一种共享方法,所有的变量都是可以和include它的主文件共享,两者高度紧密结合,不能有变量同名的冲突.而页面设置也可以借用主文件的. 静态include主要是对静态页面的引入，不会检查所包含文件的变化&lt;% @ include file=&quot;include.html&quot; %&gt;动态include主要是对动态页面的引入，它总是会检查所引入的页面的变化，如果所包含的资源在请求间发生变化，则下一次请求包含&lt;jsp:include&gt;动作的jsp时，将包含资源的新内容。另一方面，include指令在转换时一次性地将内容复制到jsp中，如果所包含的资源发生变化，则使用include指令的jsp将不能反应出新的内容，除非重新编译该jsp。 &lt;jsp：include&gt;动作包含的属性：page：指定所包含资源的相对url路径，该资源必须时同一web应用程序的组成部分。flush：指定在执行include动作后是否应刷新缓冲区，在jsp1.1中，该属性必须设置为真。使用动态include动作时，根据jsp1.1规范，jsp容器允许判断通过include指令包含的资源是否发生变化。如果发生变化。则容器可以重新编译包含该资源的jsp，然而，该规范并没有提供向容器表明某个包含的资源发生变化的机制。 动态include的优点和不足： 优点： 引入和同步一个动态的页面，使jsp页面更具灵活性 能和不同页面之间进行信息的交互和快捷的实现方式。 改变了原始的所有页面编码都放在一个jsp上，使不同的功能分别写在不同页里，通过动态include方式引用到页面，更易于编码，更易于管理。 不足： 动态的引入时需要频繁的变化和页面信息的更新和交互，要占用大量的资源开销。降低页面的访问速度。如果在没必要动态引入的情况下，不要使用动态include应该注意事项： 动作的flush属性必须要定义，不定义会出现转换错误。而且设置的flush必须要为true 在动作中指定的页面必须是同一web应用程序的一部分。如果引入的是非同一web应用的页面将导致请求时错误。 List,Set,Map是否继承自Collection接口？答：List，Set是，Map不是。如图1234567891011Collection├List //有序│ ├LinkedList│ ├ArrayList│ └Vector│ └Stack└Set //无序不重复Map //键值对├Hashtable├HashMap└WeakHashMap Collection是最基本的集合接口，一个Collection代表一组Object，即Collection的元素。一些Collection允许相同的元素而另一些不行。一些能排序而另一些不行。Java JDK不能提供直接继承自Collection的类，Java JDK提供的类都是继承自Collection的”子接口”，如:List和Set。 注意：Map没有继承Collection接口，Map提供key到value的映射。一个Map中不能包含相同key，每个key只能映射一个value。Map接口提供3种集合的视图，Map的内容可以被当做一组key集合，一组value集合，或者一组key-value映射。 详细介绍： List特点：元素有放入顺序，元素可重复 Map特点：元素按键值对存储，无放入顺序 Set特点：元素无放入顺序，元素不可重复（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的） List接口有三个实现类：LinkedList，ArrayList，Vector LinkedList：底层基于链表实现，链表内存是散乱的，每一个元素存储本身内存地址的同时还存储下一个元素的地址。链表增删快，查找慢 ArrayList和Vector的区别： ArrayList是非线程安全的，效率高； Vector是基于线程安全的，效率低 Set接口有两个实现类：HashSet(底层由HashMap实现)，LinkedHashSet SortedSet接口有一个实现类：TreeSet（底层由平衡二叉树实现） Query接口有一个实现类：LinkList Map接口有三个实现类：HashMap，HashTable，LinkeHashMap HashMap非线程安全，高效，支持null；HashTable线程安全，低效，不支持null SortedMap有一个实现类：TreeMap 其实最主要的是，list是用来处理序列的，而set是用来处理集的。Map是知道的，存储的是键值对 set一般无序不重复.map kv 结构 ,list 有序","tags":[{"name":"Java","slug":"Java","permalink":"http://liujiaan.ren/tags/Java/"}]},{"title":"7niu","date":"2016-07-10T05:08:29.000Z","path":"2016/07/10/7niu/","text":"由于hexo博客不能存储图片，需要自己将图片放到图床上，这里推荐7牛的云存储。对个人用户来说基本就是免费的。具体方法，就不说了。这里留坑以后填充使用过程中遇到的坑。","tags":[{"name":"7niu","slug":"7niu","permalink":"http://liujiaan.ren/tags/7niu/"}]},{"title":"JavaScript基础巩固第一天","date":"2016-07-05T06:44:49.000Z","path":"2016/07/05/JavaScript/JavaScript-firstday/","text":"JavaScript组成部分：语法，类型，语句，关键字，保留字，操作符，对象。标识符，就是指变量、函数、属性的名字，或者函数的参数。按照惯例，ECMAScript标识符采用驼峰大小写格式。构造函数都以大写字母开始。JavaScript中的实数常常只是真实值的一个近似表示。有两种方式来访问对象的属性，点操作符或者中括号操作符。 JavaScript五种基本数据类型，Undefined,Null,Boolean,Number和string。还有一个复杂数据类型，object。从逻辑角度来看，null值表示一个空指针对象 alert(typeof null); //=&gt; “object” typeof是一个操作符，不是函数。JavaScript是大小写敏感的，因此typeOf完全可以是一个有效的函数名。 如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值，这样一来，只要直接检查null值就可以知道相应的变量是否已经保存了一个对象的引用，如if (car !=null) { / 对car对象执行某些操作/ }实际上，undefined值是派生自null的，因此alert(null == undefined); //true","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://liujiaan.ren/tags/JavaScript/"}]},{"title":"markdown介绍及语法","date":"2016-07-02T10:34:22.000Z","path":"2016/07/02/markdown-guide/","text":"Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。—— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。 文档 创始人 John Gruber 的 Markdown 语法说明 马克飞象帮助文档 markdown中文语法说明 好用的markdown工具 安卓端推荐markdownX或者JotterPadX。前者专用于markdown的编写，能够预览。后者是一个强大的文本编辑器，目前没有发现能够markdown文件。 Mac推荐MOU。小巧强大的markdown文本编辑器。 Windows 也有很多优秀的markdown编辑器，这里不一一列举，本人用atom，github出品的文本编辑器，打开速度堪比IDE，这点不能和sublime相比，但是git标识和markdown方面，sublime表现不如atom，尤其是git，我习惯于能辨识出哪些文件、段落进行了修改，sublime并不能做到。这里安利一个atom小插件，可能大家都见过， –activate-power-mode 偶尔装装逼就好，瞎了不要找我 常见语法标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。12345# 一级标题## 二级标题### 三级标题 以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的 Markdown 语法。 列表在文字前加上 - 或 * 为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。 a b c a b c 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。 例如这样 只需要在文本前加入 &gt; 大于号即可 图片与链接插入链接与插入图片的语法很像，区别在一个 !号 图片为： 链接为：文字–显示 粗体与斜体Markdown 的粗体和斜体也非常简单，用两个 包含一段文本就是粗体的语法，用一个 包含一段文本就是斜体的语法。 例如：这里是粗体 这里是斜体 分割线分割线的语法只需要三个 * 号，例如： 高亮代码块12345&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 制作一份待办事宜 Todo 列表 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://liujiaan.ren/tags/Markdown/"},{"name":"Wiki","slug":"Wiki","permalink":"http://liujiaan.ren/tags/Wiki/"}]},{"title":"hexo第一天","date":"2016-07-02T06:44:49.000Z","path":"2016/07/02/hello-world/","text":"今天利用coding的webIDE搭建了hexo博客。回来记录一下。 前言 之前也在github上用过hexo搭建博客，一直感觉挺好的，除了有一个问题——搭建写作环境。由于Hexo是基于Node.js的，所以需要在本地电脑上安装Node.js，然后再安装Hexo，还得安装Git，一步步配置环境，有点繁琐。所以很明显存在一个问题——重装电脑后，又要配置环境，或者不能在任意一终端进行写作。现在终于找到一个方法可以实现“Set up once, write everywhere”。这就是Coding.net的WebIDE。 coding的webIDE出来时间不是很长，成熟度不如koding和c9，但是胜在访问速度快。。。毕竟是国内的服务器。coding webIDE使用不当的话，偶尔会出现一些问题，比如打不开等情况，可以点击反馈，让coding的官方人员帮你解决。 2016.08.26补充coding时不时有很多问题,已放弃webIDE,回归github.将博客代码存放在hexo分支. 首先附上两篇搭建hexo博客的通用文档 文档 | Hexo Hexo静态博客使用指南 一、准备工作首先，去Coding.net官网注册一个账号，接着，点击“+ 创建项目”,创建一个新项目。如下图所示： 项目名称和简介随意 项目类型选择“私有” 勾选“使用README.md初始化项目” 创建好项目后，通过导航栏到IDE界面，点击新建工作空间 随后，单击“同步仓库”，等待同步仓库完成。 接着，点开我们刚刚创建的项目。会提示配置界面。webIDE是收费的，收取coding的虚拟货币–码币。但是收费很良心，而且有各种途径能够赚取。用来写博客的话，选最低配置就可以。基本上和免费差不多。 如何获取码币 回到主题，创建完webIDE，点击打开，等待webIDE载入完成。就能看到界面了。全屏正有种带GUI的Linux的既视感~~而且terminal默认安装好了zsh和oh-my-zsh，算是附带小惊喜吧。调整一下选项。 有没有超酷！装逼利器，而且巨方便。 Hexo是基于Nodejs的，所以我们将运行环境切换为Nodejs。 二、正式开始打开高大上的终端，安装hexo，输入 sudo npm install -g hexo-cli 等待安装完成。 然后使用hexo init命令初始化博客 sudo hexo init 正常情况下，到这里hexo就安装完成了，如果出错的话，根据命令行提示进行处理。 然后，我们首先先解锁一下配置文件（将所有文件提权至777） sudo chmod -R 777 * 打开_config.yml博客配置文件，编辑title等属性，保存。注意将设置语言。 language: zh-Hans 支持多语言的主题会根据博客语言设置进行显示。 然后开启我们的hexo进行预览一下。 hexo s 然后，我们就可以通过单击右上角的访问链接，将端口设置为4000来访问网站。 这里用的是缩写，hexo命令如下 12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 测试成功了，那么我们先在终端中按Ctrl+C退出，然后按下访问链接中的垃圾桶来销毁端口。 那么大家刚才也看到了，IDE中的访问链接是测试用途，长且有时间限制，一看就非常不严谨，所以，我们要学会把博客Push到托管平台中。 那么，首先，我们先要安装Hexo Git插件以至于可以将静态页推送到托管平台上。 sudo npm install hexo-deployer-git –save 安装完成之后，我们配置一下_config.yml文件。修改一下最下面的deploy：将12deploy: type: 修改为12345deploy: type: git repo: [仓库地址]branch: mastermessage: blog update #push message 注：仓库地址可以在您的项目主页找到。 将博客推送到代码托管平台，在终端中使用： sudo hexo g -d 如果是http的仓库地址，会提示输入用户名和密码。ssh模式，我没有成功，提示没有权限不知道是不是因为私人仓库的原因。 我们返回coding仓库，能看到代码已经推送到仓库中了。 下面，我们开启静态页服务（Pages）。 只需要单击页面上的“Pages服务”，设置部署分支为master，然后单击“立即开启”，即可访问！ 这里必须绑定域名，这是因为Html处理请求的时候认为，您的域名为根，所以无法访问，会没有样式。打开网页只是一堆没有样式的文字。 三、添加、删除、编辑文章1、创建文章打开终端，以如下格式敲入命令： sudo hexo new &lt;文章名称&gt; 这样，我们就创建了一篇文章。 可以在目录source-&gt;_posts中找到并编辑。 完成后部署代码即可看到新的文章。 sudo hexo g -d 如果不想博文在首页全部显示, 并能出现阅读全文按钮效果, 需要在你想在首页显示的部分下添加&lt;!--more--&gt;123此处及以上的内容会在首页显示&lt;!--more--&gt;以下是在首页隐藏的部分 2、删除文章只需删除source/_posts目录下的相应md文件，重新部署即可。部署之前最好，清空一下hexo缓存，不然可能不会生效。 hexo clean 3、编辑文章编辑文章和删除道理相同，修改相应md文件重新部署即可。 四、将hexo代码同步到hexo分支。虽然我们有webIDE，能随时写博客，不受hexo环境的限制，但是还是最好将hexo的源码同步到代码仓库。由于默认deploy的是master分支。我们可以新建一个hexo分支 gco -b hexo 将代码我们博客的原始代码push到分支中，双重保险，也方便在本地修改代码。webIDE只是多了一个更加方便的选择。 gaagcmsg “hexo”gp origin hexo 这样，在我们的master分支是我们的博客内容，hexo分支是我们的博客源码。非常方便。 五、hexo主题由于hexo默认的主题，并不是很符合部分人的审美，hexo提供了很多主题，也可以自己编写主题文件。自己动手写主题文件就不说了。说一下更换主题。官方提供了一个wiki地址，里面有很多主题。 hexo主题wiki：https://github.com/hexojs/hexo/wiki/Themes Hexo 有两份主要的配置文件（_config.yml），一份位于站点根目录下，另一份位于主题目录下。为了描述方便，在以下说明中，将前者称为 站点配置文件，后者称为 主题配置文件。Hexo 安装主题的方式非常简单，将主题文件下载下来，然后放到theme文件夹里，然后修改下配置文件即可。打开 站点配置文件，找到 theme 字段，并将其值更改为你自己的主题文件即可。 这里有一个坑，由于hexo主题文件都是存放在git上的，有个人会通过git clone的方式下载主题文件，但是这样就会在你自己的本地仓库加上这个操作，导致你想要push这个项目时，无法push主题文件。所以一定要下载压缩包然后手动添加到theme文件夹中。 验证主题是否启用 运行 hexo s –debug ，并访问4000端口 ，确保站点正确运行。可以先clean一下再运行。 六、关于404页面只需在source目录下新建404.html文件即可。代码可以用腾讯公益的404123456789101112131415&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /&gt; &lt;meta name=\"robots\" content=\"all\" /&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 七、试用过程遇到的问题 一篇文章添加多个标签 tags: [标签1,标签2,标签3] Front-matter 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址","tags":[]}]